/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3854 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI123023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI123022 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI120202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI120204 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI120206 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI120208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI120204 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI138, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI130, name: "Field2", sons: null}]};
NTI120204.node = NNI120204;
NTI120206.base = NTI120204;
var NNI120202 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI120202, name: "modeCaseSensitive", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI120202, name: "modeCaseInsensitive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI120202, name: "modeStyleInsensitive", len: 0, sons: null}}};
NTI120202.node = NNI120202;
var NNI120208 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI120206, name: "data", sons: null}, 
{kind: 1, offset: "mode", len: 0, typ: NTI120202, name: "mode", sons: null}]};
NTI120208.node = NNI120208;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI120208.base = NTI3808;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3858.base = NTI3828;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
NTI123023.base = NTI138;
NTI123022.base = NTI123023;
var NNI3854 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3854.node = NNI3854;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
NTI3852.base = NTI3828;
NTI3854.base = NTI3852;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}
var ConstSet3 = setConstr([65, 90]);

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}
var ConstSet4 = setConstr([65, 90]);

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
						var pixel_data_123021 = nimCopy(null, [[makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("S"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("O"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("O"), makeNimstrLit("C"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("O"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("O"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("C"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("C"), makeNimstrLit("O"), makeNimstrLit("Y"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("Y"), makeNimstrLit("O"), makeNimstrLit("C"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("W"), makeNimstrLit("W"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("O"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("_"), makeNimstrLit("_")], [makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("_"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("B"), makeNimstrLit("_")]], NTI123022);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_118246 = [0];

function nstnewStringTable(mode_121234) {
	var result_121235 = null;

	var F={procname:"strtabs.newStringTable",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 177;
		result_121235 = {m_type: NTI120208, counter: 0, data: null, mode: 0};
		F.line = 178;
		result_121235.mode = mode_121234;
		F.line = 179;
		result_121235.counter = 0;
		F.line = 180;
		result_121235.data = new Array(64); for (var i=0;i<64;++i) {result_121235.data[i]={Field0: null, Field1: null, Field2: false};}	framePtr = F.prev;

	return result_121235;

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function HEX21HEX26_118016(h_118018, val_118019) {
	var result_118020 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 52;
		result_118020 = ((h_118018 + val_118019) >>> 0);
		F.line = 53;
		result_118020 = ((result_118020 + (result_118020 << 10)) >>> 0);
		F.line = 54;
		result_118020 = (result_118020 ^ ((result_118020 >>> 0) >>> 6));
	framePtr = F.prev;

	return result_118020;

}

function HEX21HEX24_118070(h_118072) {
	var result_118073 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 59;
		result_118073 = ((h_118072 + (h_118072 << 3)) >>> 0);
		F.line = 60;
		result_118073 = (result_118073 ^ ((result_118073 >>> 0) >>> 11));
		F.line = 61;
		result_118073 = ((result_118073 + (result_118073 << 15)) >>> 0);
	framePtr = F.prev;

	return result_118073;

}

function hash_118900(x_118902) {
	var result_118903 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 132;
		var h_118904 = 0;
		L1: do {
			F.line = 133;
			var i_118916 = 0;
			F.line = 2016;
			var colontmp__118924 = 0;
			F.line = 133;
			colontmp__118924 = subInt((x_118902 != null ? x_118902.length : 0), 1);
			F.line = 2019;
			var res_118927 = 0;
			L2: do {
				F.line = 2020;
					L3: while (true) {
					if (!(res_118927 <= colontmp__118924)) break L3;
						F.line = 2021;
						i_118916 = res_118927;
						F.line = 134;
						h_118904 = HEX21HEX26_118016(h_118904, x_118902[chckIndx(i_118916, 0, x_118902.length+0-1)-0]);
						F.line = 2022;
						res_118927 = addInt(res_118927, 1);
					}
			} while(false);
		} while(false);
		F.line = 135;
		result_118903 = HEX21HEX24_118070(h_118904);
	framePtr = F.prev;

	return result_118903;

}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function hash_ignore_case_119228(x_119230) {
	var result_119231 = 0;

	var F={procname:"hashes.hashIgnoreCase",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 199;
		var h_119232 = 0;
		L1: do {
			F.line = 200;
			var i_119244 = 0;
			F.line = 2016;
			var colontmp__119284 = 0;
			F.line = 200;
			colontmp__119284 = subInt((x_119230 != null ? x_119230.length : 0), 1);
			F.line = 2019;
			var res_119287 = 0;
			L2: do {
				F.line = 2020;
					L3: while (true) {
					if (!(res_119287 <= colontmp__119284)) break L3;
						F.line = 2021;
						i_119244 = res_119287;
						F.line = 201;
						var c_119245 = x_119230[chckIndx(i_119244, 0, x_119230.length+0-1)-0];
						if ((ConstSet2[c_119245] != undefined)) {
						F.line = 203;
						c_119245 = chckRange(addInt(c_119245, 32), 0, 255);
						}
						
						F.line = 204;
						h_119232 = HEX21HEX26_118016(h_119232, c_119245);
						F.line = 2022;
						res_119287 = addInt(res_119287, 1);
					}
			} while(false);
		} while(false);
		F.line = 205;
		result_119231 = HEX21HEX24_118070(h_119232);
	framePtr = F.prev;

	return result_119231;

}

function hash_ignore_style_119072(x_119074) {
	var result_119075 = 0;

	var F={procname:"hashes.hashIgnoreStyle",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 163;
		var h_119076 = 0;
		F.line = 164;
		var i_119078 = 0;
		F.line = 165;
		var x_len_119079 = (x_119074 != null ? x_119074.length : 0);
		L1: do {
			F.line = 166;
				L2: while (true) {
				if (!(i_119078 < x_len_119079)) break L2;
					F.line = 167;
					var c_119080 = x_119074[chckIndx(i_119078, 0, x_119074.length+0-1)-0];
					if ((c_119080 == 95)) {
					F.line = 169;
					i_119078 = addInt(i_119078, 1);
					}
					else {
						if ((ConstSet3[c_119080] != undefined)) {
						F.line = 172;
						c_119080 = chckRange(addInt(c_119080, 32), 0, 255);
						}
						
						F.line = 173;
						h_119076 = HEX21HEX26_118016(h_119076, c_119080);
						F.line = 174;
						i_119078 = addInt(i_119078, 1);
					}
					
				}
		} while(false);
		F.line = 176;
		result_119075 = HEX21HEX24_118070(h_119076);
	framePtr = F.prev;

	return result_119075;

}

function myhash_120412(t_120414, key_120415) {
	var result_120416 = 0;

	var F={procname:"strtabs.myhash",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 76;
		switch (t_120414.mode) {
		case 0:
			F.line = 77;
			result_120416 = hash_118900(key_120415);
			break;
		case 1:
			F.line = 78;
			result_120416 = hash_ignore_case_119228(key_120415);
			break;
		case 2:
			F.line = 79;
			result_120416 = hash_ignore_style_119072(key_120415);
			break;
		}
	framePtr = F.prev;

	return result_120416;

}

function cmpStrings(a_16418, b_16419) {
		    if (a_16418 == b_16419) return 0;
    if (!a_16418) return -1;
    if (!b_16419) return 1;
    for (var i = 0; i < a_16418.length && i < b_16419.length; i++) {
      var result = a_16418[i] - b_16419[i];
      if (result != 0) return result;
    }
    return a_16418.length - b_16419.length;
  

	
}

function cmp_7058(x_7060, y_7061) {
	var result_16438 = 0;

	BeforeRet: do {
		result_16438 = cmpStrings(x_7060, y_7061);
		break BeforeRet;
	} while (false);

	return result_16438;

}

function nsuToLowerAsciiChar(c_109213) {
	var result_109214 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet4[c_109213] != undefined)) {
		F.line = 212;
		result_109214 = chckRange(addInt(c_109213, 32), 0, 255);
		}
		else {
			F.line = 214;
			result_109214 = c_109213;
		}
		
	framePtr = F.prev;

	return result_109214;

}

function nsuCmpIgnoreCase(a_109518, b_109519) {
	var result_109520 = 0;

	var F={procname:"strutils.cmpIgnoreCase",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 283;
		var i_109522 = 0;
		F.line = 284;
		var m_109523 = nimMin((a_109518 != null ? a_109518.length : 0), (b_109519 != null ? b_109519.length : 0));
		L1: do {
			F.line = 285;
				L2: while (true) {
				if (!(i_109522 < m_109523)) break L2;
					F.line = 286;
					result_109520 = subInt(nsuToLowerAsciiChar(a_109518[chckIndx(i_109522, 0, a_109518.length+0-1)-0]), nsuToLowerAsciiChar(b_109519[chckIndx(i_109522, 0, b_109519.length+0-1)-0]));
					if (!((result_109520 == 0))) {
					F.line = 287;
					break BeforeRet;
					}
					
					F.line = 288;
					i_109522 = addInt(i_109522, 1);
				}
		} while(false);
		F.line = 289;
		result_109520 = subInt((a_109518 != null ? a_109518.length : 0), (b_109519 != null ? b_109519.length : 0));
	} while (false);
	framePtr = F.prev;

	return result_109520;

}

function nsuCmpIgnoreStyle(a_109561, b_109562) {
					var Tmp7;
					var Tmp8;

	var result_109563 = 0;

	BeforeRet: do {
		var i_109565 = 0;
		var j_109567 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_109565 < (a_109561 != null ? a_109561.length : 0)) && (a_109561[i_109565] == 95))) break L4;
								i_109565 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_109567 < (b_109562 != null ? b_109562.length : 0)) && (b_109562[j_109567] == 95))) break L6;
								j_109567 += 1;
							}
					} while(false);
					if ((i_109565 < (a_109561 != null ? a_109561.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_109561[i_109565]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_109586 = Tmp7;
					if ((j_109567 < (b_109562 != null ? b_109562.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_109562[j_109567]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_109587 = Tmp8;
					result_109563 = (aa_109586 - bb_109587);
					if (!((result_109563 == 0))) {
					break BeforeRet;
					}
					
					if (((a_109561 != null ? a_109561.length : 0) <= i_109565)) {
					if (((b_109562 != null ? b_109562.length : 0) <= j_109567)) {
					result_109563 = 0;
					break BeforeRet;
					}
					
					result_109563 = -1;
					break BeforeRet;
					}
					else {
					if (((b_109562 != null ? b_109562.length : 0) <= j_109567)) {
					result_109563 = 1;
					break BeforeRet;
					}
					}
					i_109565 += 1;
					j_109567 += 1;
				}
		} while(false);
	} while (false);

	return result_109563;

}

function my_cmp_120432(t_120434, a_120435, b_120436) {
	var result_120437 = false;

	var F={procname:"strtabs.myCmp",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 82;
		switch (t_120434.mode) {
		case 0:
			F.line = 83;
			result_120437 = (cmp_7058(a_120435, b_120436) == 0);
			break;
		case 1:
			F.line = 84;
			result_120437 = (nsuCmpIgnoreCase(a_120435, b_120436) == 0);
			break;
		case 2:
			F.line = 85;
			result_120437 = (nsuCmpIgnoreStyle(a_120435, b_120436) == 0);
			break;
		}
	framePtr = F.prev;

	return result_120437;

}

function next_try_120614(h_120616, max_hash_120617) {
	var result_120618 = 0;

	var F={procname:"strtabs.nextTry",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 92;
		result_120618 = (addInt(mulInt(5, h_120616), 1) & max_hash_120617);
	framePtr = F.prev;

	return result_120618;

}

function raw_get_120633(t_120635, key_120636) {
	var result_120637 = 0;

	var F={procname:"strtabs.rawGet",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 95;
		var h_120646 = (myhash_120412(t_120635, key_120636) & (t_120635.data != null ? (t_120635.data.length-1) : -1));
		L1: do {
			F.line = 96;
				L2: while (true) {
				if (!t_120635.data[chckIndx(h_120646, 0, t_120635.data.length+0-1)-0].Field2) break L2;
					if (my_cmp_120432(t_120635, t_120635.data[chckIndx(h_120646, 0, t_120635.data.length+0-1)-0].Field0, key_120636)) {
					F.line = 98;
					result_120637 = h_120646;
					break BeforeRet;
					}
					
					F.line = 99;
					h_120646 = next_try_120614(h_120646, (t_120635.data != null ? (t_120635.data.length-1) : -1));
				}
		} while(false);
		F.line = 100;
		result_120637 = -1;
	} while (false);
	framePtr = F.prev;

	return result_120637;

}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\system.nim",line:0};
	framePtr = F;
		F.line = 2827;
		var e_20445 = null;
		F.line = 2828;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2829;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2830;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\system.nim",line:0};
	framePtr = F;
		F.line = 3783;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\system.nim",line:0};
	framePtr = F;
		F.line = 3790;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function must_rehash_120451(length_120453, counter_120454) {
	var result_120455 = false;

	var F={procname:"strtabs.mustRehash",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		if (!((counter_120454 < length_120453))) {
		F.line = 88;
		failed_assert_impl_20481(makeNimstrLit("D:\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim(88, 9) `\x0Acounter < length` "));
		}
		
		F.line = 89;
		result_120455 = ((mulInt(length_120453, 2) < mulInt(counter_120454, 3)) || (subInt(length_120453, counter_120454) < 4));
	framePtr = F.prev;

	return result_120455;

}

function raw_insert_120887(t_120889, data_120891, data_120891_Idx, key_120892, val_120893) {
	var F={procname:"strtabs.rawInsert",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 132;
		var h_120902 = (myhash_120412(t_120889, key_120892) & (data_120891[data_120891_Idx] != null ? (data_120891[data_120891_Idx].length-1) : -1));
		L1: do {
			F.line = 133;
				L2: while (true) {
				if (!data_120891[data_120891_Idx][chckIndx(h_120902, 0, data_120891[data_120891_Idx].length+0-1)-0].Field2) break L2;
					F.line = 134;
					h_120902 = next_try_120614(h_120902, (data_120891[data_120891_Idx] != null ? (data_120891[data_120891_Idx].length-1) : -1));
				}
		} while(false);
		F.line = 135;
		data_120891[data_120891_Idx][chckIndx(h_120902, 0, data_120891[data_120891_Idx].length+0-1)-0].Field0 = nimCopy(null, key_120892, NTI138);
		F.line = 136;
		data_120891[data_120891_Idx][chckIndx(h_120902, 0, data_120891[data_120891_Idx].length+0-1)-0].Field1 = nimCopy(null, val_120893, NTI138);
		F.line = 137;
		data_120891[data_120891_Idx][chckIndx(h_120902, 0, data_120891[data_120891_Idx].length+0-1)-0].Field2 = true;
	framePtr = F.prev;

	
}

function enlarge_120925(t_120927) {
	var F={procname:"strtabs.enlarge",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 140;
		var n_120928 = [null];
		F.line = 141;
		n_120928[0] = new Array(chckRange(mulInt((t_120927.data != null ? t_120927.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_120927.data != null ? t_120927.data.length : 0), 2), 0, 2147483647);++i) {n_120928[0][i]={Field0: null, Field1: null, Field2: false};}		L1: do {
			F.line = 142;
			var i_120965 = 0;
			F.line = 2000;
			var colontmp__120978 = 0;
			F.line = 142;
			colontmp__120978 = (t_120927.data != null ? (t_120927.data.length-1) : -1);
			F.line = 2006;
			var res_120981 = 0;
			L2: do {
				F.line = 2007;
					L3: while (true) {
					if (!(res_120981 <= colontmp__120978)) break L3;
						F.line = 2008;
						i_120965 = res_120981;
						if (t_120927.data[chckIndx(i_120965, 0, t_120927.data.length+0-1)-0].Field2) {
						F.line = 143;
						raw_insert_120887(t_120927, n_120928, 0, t_120927.data[chckIndx(i_120965, 0, t_120927.data.length+0-1)-0].Field0, t_120927.data[chckIndx(i_120965, 0, t_120927.data.length+0-1)-0].Field1);
						}
						
						F.line = 2009;
						res_120981 = addInt(res_120981, 1);
					}
			} while(false);
		} while(false);
		F.line = 144;
		var Tmp4 = t_120927.data; t_120927.data = n_120928[0]; n_120928[0] = Tmp4;	framePtr = F.prev;

	
}

function nstPut(t_121000, key_121001, val_121002) {
	var F={procname:"strtabs.[]=",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 148;
		var index_121003 = raw_get_120633(t_121000, key_121001);
		if ((0 <= index_121003)) {
		F.line = 150;
		t_121000.data[chckIndx(index_121003, 0, t_121000.data.length+0-1)-0].Field1 = nimCopy(null, val_121002, NTI138);
		}
		else {
			if (must_rehash_120451((t_121000.data != null ? t_121000.data.length : 0), t_121000.counter)) {
			F.line = 152;
			enlarge_120925(t_121000);
			}
			
			F.line = 153;
			raw_insert_120887(t_121000, t_121000, "data", key_121001, val_121002);
			F.line = 154;
			t_121000.counter = addInt(t_121000.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function nstnewStringTableWithTableConstr(key_value_pairs_121361, mode_121362) {
	var result_121363 = null;

	var F={procname:"strtabs.newStringTable",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 211;
		result_121363 = nstnewStringTable(mode_121362);
		L1: do {
			F.line = 212;
			var key_121402 = null;
			F.line = 212;
			var val_121403 = null;
			F.line = 2159;
			var i_121407 = 0;
			L2: do {
				F.line = 2160;
					L3: while (true) {
					if (!(i_121407 < (key_value_pairs_121361 != null ? key_value_pairs_121361.length : 0))) break L3;
						F.line = 2161;
						key_121402 = key_value_pairs_121361[chckIndx(i_121407, 0, key_value_pairs_121361.length+0-1)-0]["Field0"];
						F.line = 2161;
						val_121403 = key_value_pairs_121361[chckIndx(i_121407, 0, key_value_pairs_121361.length+0-1)-0]["Field1"];
						F.line = 212;
						nstPut(result_121363, key_121402, val_121403);
						F.line = 2162;
						i_121407 = addInt(i_121407, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_121363;

}
var colors_123064 = nstnewStringTableWithTableConstr([], 0);
nstPut(colors_123064, makeNimstrLit("C"), makeNimstrLit("255, 0, 0"));
nstPut(colors_123064, makeNimstrLit("B"), makeNimstrLit("100, 50, 0"));
nstPut(colors_123064, makeNimstrLit("S"), makeNimstrLit("255, 200, 150"));
nstPut(colors_123064, makeNimstrLit("O"), makeNimstrLit("0, 0, 255"));
nstPut(colors_123064, makeNimstrLit("Y"), makeNimstrLit("255, 255, 0"));
nstPut(colors_123064, makeNimstrLit("W"), makeNimstrLit("255, 255, 255"));
nstPut(colors_123064, makeNimstrLit("_"), makeNimstrLit("229, 230, 232"));
var root_123065 = [null];

function nstTake(t_120684, key_120685) {
	var result_120687 = [null, 0];
	var result_120687_Idx = 0;

	var F={procname:"strtabs.[]",prev:framePtr,filename:"..\\..\\..\\msys64\\mingw64\\lib\\nim\\pure\\strtabs.nim",line:0};
	framePtr = F;
		F.line = 103;
		var index_120691 = raw_get_120633(t_120684, key_120685);
		if ((0 <= index_120691)) {
		F.line = 104;
		result_120687 = t_120684.data[chckIndx(index_120691, 0, t_120684.data.length+0-1)-0]; result_120687_Idx = "Field1";
		}
		else {
			F.line = 2807;
			var e_120807 = null;
			F.line = 2808;
			e_120807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 107;
			e_120807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_120685), NTI138);
			F.line = 2803;
			e_120807.parent = null;
			F.line = 107;
			raiseException(e_120807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_120687, result_120687_Idx];

}

function join_123117(a_123122, sep_123124) {
	var result_123125 = null;

		result_123125 = nimCopy(null, [], NTI138);
		L1: do {
			var i_123170 = 0;
			var x_123171 = 0;
			var i_123177 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_123177 < (a_123122 != null ? a_123122.length : 0))) break L3;
						i_123170 = i_123177;
						x_123171 = a_123122[i_123177];
						if ((0 < i_123170)) {
						if (result_123125 != null) { result_123125 = (result_123125).concat(sep_123124); } else { result_123125 = sep_123124.slice(); };
						}
						
						if (result_123125 != null) { result_123125 = (result_123125).concat(cstrToNimstr((x_123171)+"")); } else { result_123125 = cstrToNimstr((x_123171)+"").slice(); };
						i_123177 += 1;
					}
			} while(false);
		} while(false);

	return result_123125;

}

function get_random_value_123082() {
	var result_123084 = 0;

	var F={procname:"pixel_mario.getRandomValue",prev:framePtr,filename:"pixel_mario.nim",line:0};
	framePtr = F;
		F.line = 44;
		result_123084 = Math.floor((Math.random() * 2.5600000000000000e+002));
	framePtr = F.prev;

	return result_123084;

}

function on_pixel_click_123109(value_123111, ev_123112) {
	var F={procname:"pixel_mario.onPixelClick",prev:framePtr,filename:"pixel_mario.nim",line:0};
	framePtr = F;
		F.line = 47;
		nstPut(colors_123064, value_123111, join_123117([get_random_value_123082(), get_random_value_123082(), get_random_value_123082()], makeNimstrLit(" , ")));
		F.line = 48;
		document.body.removeChild(root_123065[0]);
		F.line = 49;
		main_123080();
	framePtr = F.prev;

	
}

function render_pixel_123204(value_123206) {
		var Tmp1;

		function HEX3Aanonymous_123209(ev_123211) {
			var F={procname:"renderPixel.:anonymous",prev:framePtr,filename:"pixel_mario.nim",line:0};
			framePtr = F;
				F.line = 58;
				on_pixel_click_123109(value_123206, ev_123211);
			framePtr = F.prev;

			
		}

	var result_123207 = null;

	var F={procname:"pixel_mario.renderPixel",prev:framePtr,filename:"pixel_mario.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 52;
		var col_123208 = document.createElement("div");
		F.line = 53;
		col_123208.style.backgroundColor = toJSStr((makeNimstrLit("rgb(")).concat((Tmp1 = nstTake(colors_123064, value_123206), Tmp1[0])[Tmp1[1]],makeNimstrLit(")")));
		F.line = 54;
		col_123208.style.width = "20px";
		F.line = 55;
		col_123208.style.height = "20px";
		F.line = 56;
		col_123208.style.display = "inline-block";
		F.line = 57;
		col_123208.addEventListener("click", HEX3Aanonymous_123209, false);
		F.line = 60;
		result_123207 = col_123208;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_123207;

}

function render_canvas_123239(root_123241) {
	var F={procname:"pixel_mario.renderCanvas",prev:framePtr,filename:"pixel_mario.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 63;
			var row_data_123302 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2173;
			var i_123372 = 0;
			if ((i_123372 <= 16)) {
			L2: do {
				F.line = 2175;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2176;
						nimCopy(row_data_123302, pixel_data_123021[chckIndx(i_123372, 0, pixel_data_123021.length+0-1)-0], NTI123023);
						F.line = 64;
						var row_123303 = document.createElement("div");
						F.line = 65;
						row_123303.style.height = "20px";
						L4: do {
							F.line = 66;
							var col_123364 = null;
							F.line = 2173;
							var i_123369 = 0;
							if ((i_123369 <= 13)) {
							L5: do {
								F.line = 2175;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2176;
										col_123364 = row_data_123302[chckIndx(i_123369, 0, row_data_123302.length+0-1)-0];
										F.line = 67;
										row_123303.appendChild(render_pixel_123204(col_123364));
										if ((13 <= i_123369)) {
										F.line = 2177;
										break L5;
										}
										
										F.line = 2178;
										i_123369 = addInt(i_123369, 1);
									}
							} while(false);
							}
							
						} while(false);
						F.line = 68;
						root_123241.appendChild(row_123303);
						if ((16 <= i_123372)) {
						F.line = 2177;
						break L2;
						}
						
						F.line = 2178;
						i_123372 = addInt(i_123372, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function main_123080() {
	var F={procname:"pixel_mario.main",prev:framePtr,filename:"pixel_mario.nim",line:0};
	framePtr = F;
		F.line = 71;
		root_123065[0] = document.createElement("div");
		F.line = 72;
		root_123065[0].style.background = "white";
		F.line = 73;
		root_123065[0].style.minHeight = "100vh";
		F.line = 74;
		render_canvas_123239(root_123065[0]);
		F.line = 75;
		document.body.appendChild(root_123065[0]);
	framePtr = F.prev;

	
}

function on_load_123401(event_123403) {
	var F={procname:"pixel_mario.onLoad",prev:framePtr,filename:"pixel_mario.nim",line:0};
	framePtr = F;
		F.line = 78;
		main_123080();
	framePtr = F.prev;

	
}
window.onload = on_load_123401;
